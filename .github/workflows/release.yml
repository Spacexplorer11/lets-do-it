name: Release Letâ€™s Do It

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.81.0
          override: true

      - name: Run tests
        run: cargo test --all --locked

      - name: Determine latest tag
        if: matrix.os == 'ubuntu-latest'
        id: tag
        run: |
          latest=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || echo "v0.0.0")
          echo "LATEST_TAG=$latest" >> $GITHUB_ENV
          echo "LATEST_TAG=$latest" >> $GITHUB_OUTPUT

      - name: Decide next version
        if: matrix.os == 'ubuntu-latest'
        id: semver
        run: |
          [ -z "$LATEST_TAG" ] && LATEST_TAG="v1.0.0"
          bump="patch"
          if git log "$LATEST_TAG"..HEAD | grep -q "BREAKING CHANGE:"; then
            bump="major"
          elif git log "$LATEST_TAG"..HEAD | grep -q "^feat:"; then
            bump="minor"
          fi

          IFS='.' read -r MA MI PS <<< "${LATEST_TAG#v}"

          if [ "$bump" = "major" ]; then
            MA=$((MA+1)); MI=0; PS=0
          elif [ "$bump" = "minor" ]; then
            MI=$((MI+1)); PS=0
          else
            PS=$((PS+1))
          fi

          NEW_TAG="v$MA.$MI.$PS"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Generate release notes
        if: matrix.os == 'ubuntu-latest'
        run: |
          git log $LATEST_TAG..HEAD --pretty=format:"- %s" > release-notes.md

      - name: Push new tag
        if: matrix.os == 'ubuntu-latest'
        run: |
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Install required Rust targets (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Install required Rust targets (Linux cross for Windows)
        if: matrix.os == 'ubuntu-latest'
        run: |
          rustup target add x86_64-pc-windows-gnu

      - name: Build & release all targets
        if: matrix.os == 'ubuntu-latest'
        uses: rust-build/rust-build.action@v1.4.5
        with:
          RUSTTARGET: x86_64-unknown-linux-musl
          TOOLCHAIN_VERSION: 1.81.0
          ARCHIVE_TYPES: zip
          ARCHIVE_NAME: lets-do-it-linux-x86_64
          UPLOAD_MODE: release

      - name: Build macOS x86_64
        if: matrix.os == 'macos-latest'
        run: cargo build --release --target x86_64-apple-darwin

      - name: Build macOS ARM64
        if: matrix.os == 'macos-latest'
        run: cargo build --release --target aarch64-apple-darwin

      - name: Archive macOS x86_64 binary
        if: matrix.os == 'macos-latest'
        run: zip lets-do-it-macos-x86_64.zip target/x86_64-apple-darwin/release/lets-do-it

      - name: Archive macOS ARM64 binary
        if: matrix.os == 'macos-latest'
        run: zip lets-do-it-macos-arm64.zip target/aarch64-apple-darwin/release/lets-do-it

      - name: Build Windows x86_64
        if: matrix.os == 'ubuntu-latest'
        uses: rust-build/rust-build.action@v1.4.5
        with:
          RUSTTARGET: x86_64-pc-windows-gnu
          TOOLCHAIN_VERSION: 1.81.0
          ARCHIVE_TYPES: zip
          ARCHIVE_NAME: lets-do-it-windows-x86_64
          UPLOAD_MODE: release

      - name: Create GitHub Release and upload assets
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          body_path: release-notes.md
          files: |
            lets-do-it-linux-x86_64.zip
            lets-do-it-windows-x86_64.zip
            lets-do-it-macos-x86_64.zip
            lets-do-it-macos-arm64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}