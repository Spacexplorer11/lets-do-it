name: Release Letâ€™s Do It

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.81.0
          override: true

      - name: Run tests
        run: cargo test --all --locked

      - name: Ensure initial tag exists if needed
        if: matrix.os == 'ubuntu-latest'
        run: |
          # If no tags exist, create v1.0.0
          if ! git tag | grep -q '^v[0-9]\+\.[0-9]\+\.[0-9]\+$'; then
            git tag v1.0.0
            git push origin v1.0.0
            echo "LATEST_TAG=v1.0.0" >> $GITHUB_ENV
            echo "LATEST_TAG=v1.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Determine latest tag
        if: matrix.os == 'ubuntu-latest'
        id: tag
        run: |
          latest=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || echo "v0.0.0")
          latest=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
          if [ -z "$latest" ]; then
          latest="v1.0.0"
          fi
          echo "LATEST_TAG=$latest" >> $GITHUB_ENV
          echo "LATEST_TAG=$latest" >> $GITHUB_OUTPUT

      - name: Decide next version
        if: matrix.os == 'ubuntu-latest'
        id: semver
        run: |
          [ -z "$LATEST_TAG" ] && LATEST_TAG="v1.0.0"
          bump="patch"
          if git log "$LATEST_TAG"..HEAD | grep -q "BREAKING CHANGE:"; then
            bump="major"
          elif git log "$LATEST_TAG"..HEAD | grep -q "^feat:"; then
            bump="minor"
          fi

          IFS='.' read -r MA MI PS <<< "${LATEST_TAG#v}"

          if [ "$bump" = "major" ]; then
            MA=$((MA+1)); MI=0; PS=0
          elif [ "$bump" = "minor" ]; then
            MI=$((MI+1)); PS=0
          else
            PS=$((PS+1))
          fi

          NEW_TAG="v$MA.$MI.$PS"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Install git-cliff
        if: matrix.os == 'ubuntu-latest'
        run: cargo install git-cliff --version 2.6.1

      - name: Generate release notes with git-cliff
        if: matrix.os == 'ubuntu-latest'
        run: |
          git cliff --tag $NEW_TAG > release-notes.md

      - name: Push new tag
        if: matrix.os == 'ubuntu-latest'
        run: |
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Install required Rust targets (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Install required Rust targets (Linux cross for Windows)
        if: matrix.os == 'ubuntu-latest'
        run: |
          rustup target add x86_64-pc-windows-gnu

      - name: Add musl target and build Linux binary
        if: matrix.os == 'ubuntu-latest'
        run: |
          rustup target add x86_64-unknown-linux-musl
          cargo build --release --target x86_64-unknown-linux-musl

      - name: Build macOS x86_64
        if: matrix.os == 'macos-latest'
        run: cargo build --release --target x86_64-apple-darwin

      - name: Build macOS ARM64
        if: matrix.os == 'macos-latest'
        run: cargo build --release --target aarch64-apple-darwin

      - name: Archive macOS x86_64 binary
        if: matrix.os == 'macos-latest'
        run: zip lets-do-it-macos-x86_64.zip target/x86_64-apple-darwin/release/lets-do-it

      - name: Archive macOS ARM64 binary
        if: matrix.os == 'macos-latest'
        run: zip lets-do-it-macos-arm64.zip target/aarch64-apple-darwin/release/lets-do-it

      - name: Upload macOS x86_64 zip
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: lets-do-it-macos-x86_64.zip
          path: lets-do-it-macos-x86_64.zip

      - name: Upload macOS ARM64 zip
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: lets-do-it-macos-arm64.zip
          path: lets-do-it-macos-arm64.zip

      - name: Build Windows x86_64
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install -y mingw-w64
          rustup target add x86_64-pc-windows-gnu
          cargo build --release --target x86_64-pc-windows-gnu

      - name: Zip Linux binary
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p dist
          cp target/x86_64-unknown-linux-musl/release/lets-do-it dist/
          cd dist && zip ../lets-do-it-linux-x86_64.zip lets-do-it && cd ..
          rm -rf dist

      - name: Zip Windows binary
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p dist
          cp target/x86_64-pc-windows-gnu/release/lets-do-it.exe dist/
          cd dist && zip ../lets-do-it-windows-x86_64.zip lets-do-it.exe && cd ..
          rm -rf dist

      - name: Download macOS x86_64 zip
        if: matrix.os == 'ubuntu-latest'
        uses: actions/download-artifact@v4
        with:
          name: lets-do-it-macos-x86_64.zip

      - name: Download macOS ARM64 zip
        if: matrix.os == 'ubuntu-latest'
        uses: actions/download-artifact@v4
        with:
          name: lets-do-it-macos-arm64.zip

      - name: Create GitHub Release with gh CLI
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Creating release $NEW_TAG..."
          gh release create "$NEW_TAG" \
            --title "Release $NEW_TAG" \
            --notes-file release-notes.md \
            lets-do-it-linux-x86_64.zip \
            lets-do-it-windows-x86_64.zip \
            lets-do-it-macos-x86_64.zip \
            lets-do-it-macos-arm64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}